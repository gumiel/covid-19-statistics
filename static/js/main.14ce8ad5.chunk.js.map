{"version":3,"sources":["components/atoms/SpecificArea.jsx","components/atoms/Timeline.jsx","components/atoms/TimelineCard.js","components/atoms/PieCard.js","components/atoms/InfoCard.js","components/organisms/AreaMultiplesPaises.js","components/organisms/AreaBolivia.js","components/atoms/GlobalAreaPie.jsx","components/organisms/AreaGlobal.jsx","components/pages/Estadisticas.js","App.js","index.js"],"names":["SpecificArea","useState","chartRef2","React","createRef","dataBarra","myData","setMyData","useEffect","Axios","get","then","res","console","log","data","myChartRef2","current","getContext","Chart","type","cases","deaths","recovered","window","chartColors","red","purple","green","text","Body","todayCases","active","critical","format","updated","id","ref","Timeline","dataTimeline","chartRef3","dataChart","myChartRef3","arregloFechaCasos","Object","keys","timeline","map","d","arrayD","split","arregloDatosCasos","values","arregloDatosMuertes","arregloDatosRecuperaciones","config","labels","datasets","label","backgroundColor","borderColor","fill","options","responsive","title","display","country","scales","xAxes","yAxes","TimelineCard","nombrePais","alpha3Code","ctx","document","getElementById","PieCard","paisSeleccionado","ctx1","config1","blue","yellow","InfoCard","src","countryInfo","flag","heigth","width","AreaMultiplesPaises","todayDeaths","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","affectedCountries","setPaisSeleccionado","paises","setPaises","defaultValue","className","onChange","e","pais","target","value","cambiandoPais","disabled","key","uuid","name","my","col","AreaBolivia","GlobalAreaPie","props","chartRef","this","dibujar","globalData","myChartRef","global_data","Component","AreaGlobal","prop","state","forEach","element","setState","Estadistica","App","expand","light","bg","Brand","href","Toggler","navbar","Nav","mr","Item","Link","dropdown","dropdownToggle","Menu","Divider","inline","Input","placeholder","outline","success","orange","grey","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.14ce8ad5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {Row, Col, Card, BH5} from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport Chart from \"chart.js\";\r\nimport Moment from \"react-moment\";\r\n// import MultiSelect from \"react-multi-select-component\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst SpecificArea = function(){\r\n\r\n  \r\n  // const options = [\r\n  //     { label: \"Grapes 🍇\", value: \"grapes\" },\r\n  //     { label: \"Mango 🥭\", value: \"mango\" },\r\n  //     { label: \"Strawberry 🍓\", value: \"strawberry\" },\r\n  // ];\r\n\r\n  // const [selected, setSelected] = useState([]);\r\n\r\n  const [dataBarra, setDataBarra] = useState({\r\n    chartRef2 : React.createRef()\r\n  });\r\n\r\n  const [myData, setMyData] = useState({\r\n    \"updated\": 1587044800696,\r\n    \"country\": \"\",\r\n    \"countryInfo\": {\r\n      \"_id\": 0,\r\n      \"iso2\": \"\",\r\n      \"iso3\": \"\",\r\n      \"lat\": 0,\r\n      \"long\": 0,\r\n      \"flag\": \"\"\r\n    },\r\n    \"cases\": 0,\r\n    \"todayCases\": 0,\r\n    \"deaths\": 0,\r\n    \"todayDeaths\": 0,\r\n    \"recovered\": 0,\r\n    \"active\": 0,\r\n    \"critical\": 0,\r\n    \"casesPerOneMillion\": 0,\r\n    \"deathsPerOneMillion\": 0,\r\n    \"tests\": 0,\r\n    \"testsPerOneMillion\": 0\r\n  });\r\n\r\n  useEffect(()=>{\r\n    Axios.get(\"https://corona.lmao.ninja/v2/countries/BOL\").then(res => {\r\n      console.log(res.data);\r\n      setMyData(res.data);\r\n      \r\n      \r\n\r\n      const myChartRef2 = dataBarra.chartRef2.current.getContext(\"2d\");\r\n\r\n      \r\n      new Chart(myChartRef2, {\r\n        type: 'horizontalBar',\r\n        data: {\r\n          \"labels\": [`Casos (${res.data.cases})`, `Fallecidos (${res.data.deaths})`, `Recuperados (${res.data.recovered})`],\r\n          \"datasets\": [{\r\n            \"label\": [\"Bolivia\"], \r\n            \"data\": [res.data.cases, res.data.deaths, res.data.recovered], \r\n            \"fill\": false,\r\n            \"backgroundColor\": [window.chartColors.red, window.chartColors.purple, window.chartColors.green ]\r\n          }]\r\n        },\r\n      });\r\n\r\n\r\n\r\n      \r\n\r\n    });\r\n  },[]);\r\n  \r\n  return (\r\n      <>\r\n        <Row>\r\n        <Col text=\"center\">\r\n          <h2>Datos en Bolivia.</h2>\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n          <Card>\r\n            <Card.Body>\r\n              {/* <Card.Text> */}\r\n                <p>Casos a nivel nacional: <b>{myData.cases}</b></p>\r\n                <p>Total de recuperados: <b>{myData.recovered}</b></p>\r\n                <p>Total de fallecidos: <b>{myData.deaths}</b></p>\r\n                <p>Casos del dia de hoy: {myData.todayCases}</p>\r\n                <p>Total de casos activos: {myData.active}</p>\r\n                <p>Casos criticos: {myData.critical}</p>\r\n              {/* </Card.Text> */}\r\n            </Card.Body>\r\n          </Card>\r\n            \r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body>\r\n                {/* <Card.Text> */}\r\n                  <BH5>Cuadro de la fecha <Moment format=\"DD/MM/YYYY\">{myData.updated}</Moment> </BH5>\r\n                      {/* <pre>{JSON.stringify(selected)}</pre>\r\n                      <MultiSelect\r\n                          options={options}\r\n                          value={selected}\r\n                          onChange={setSelected}\r\n                          labelledBy={\"Select\"}\r\n                      /> */}\r\n                  <canvas id=\"myChart2\" ref={dataBarra.chartRef2} />\r\n                {/* </Card.Text> */}\r\n              </Card.Body>\r\n            </Card>\r\n\r\n          </Col>\r\n        </Row>\r\n      </>\r\n  );\r\n\r\n}\r\n\r\nexport default SpecificArea;    ","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card } from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport Chart from \"chart.js\";\r\n\r\nconst Timeline = function(){\r\n\r\n    \r\n    const [dataTimeline, setDataTimeline] = useState({\r\n        \"country\": \"\",\r\n        \"provinces\": [],\r\n        \"timeline\": {\r\n            \"cases\": {\r\n        },\r\n        \"deaths\": {\r\n        },\r\n        \"recovered\": {\r\n        }\r\n        }\r\n    });\r\n\r\n  \r\n\r\n    const [dataChart, setDataChart] = useState({\r\n        chartRef3: React.createRef()\r\n    });\r\n\r\n    useEffect(()=>{  \r\n\r\n        Axios.get(\"https://corona.lmao.ninja/v2/historical/BOL?lastdays=30\").then(res=>{ \r\n\r\n            console.log('*****');\r\n            console.log(res.data);\r\n             \r\n\r\n            const myChartRef3 = dataChart.chartRef3.current.getContext(\"2d\");\r\n            \r\n            \r\n            let arregloFechaCasos = Object.keys(res.data.timeline.cases);\r\n            arregloFechaCasos = arregloFechaCasos.map(function(d) {\r\n                let arrayD = d.split('/');\r\n                return arrayD[1]+'/'+arrayD[0]+'/'+arrayD[2];\r\n            });\r\n\r\n\r\n            let arregloDatosCasos = Object.values(res.data.timeline.cases);\r\n            let arregloDatosMuertes = Object.values(res.data.timeline.deaths);\r\n            let arregloDatosRecuperaciones = Object.values(res.data.timeline.recovered);\r\n\r\n            console.log(arregloFechaCasos);\r\n            \r\n            var config = {\r\n                type: 'line',\r\n                data: {\r\n                    labels: arregloFechaCasos,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Casos',\r\n                            backgroundColor: window.chartColors.red,\r\n                            borderColor: window.chartColors.red,\r\n                            fill: false,\r\n                            data: arregloDatosCasos,\r\n                        }, \r\n                        {\r\n                            label: 'Muertes',\r\n                            backgroundColor: window.chartColors.purple,\r\n                            borderColor: window.chartColors.purple,\r\n                            fill: false,\r\n                            data: arregloDatosMuertes,\r\n                        },\r\n                        {\r\n                            label: 'Recuperaciones',\r\n                            backgroundColor: window.chartColors.green,\r\n                            borderColor: window.chartColors.green,\r\n                            fill: false,\r\n                            data: arregloDatosRecuperaciones,\r\n                        },\r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: `Linea de tiempo del covid en ${res.data.country}`\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                            display: true,\r\n                        }],\r\n                        yAxes: [{\r\n                            display: true,\r\n                            // type: 'logarithmic',\r\n                        }]\r\n                    }\r\n                }\r\n            };\r\n            \r\n            \r\n            \r\n            new Chart(myChartRef3, config);\r\n        \r\n        \r\n        });\r\n\r\n    },[]);\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <h5>Linea de tiempo de {dataTimeline.country}</h5>\r\n                        <div>\r\n                            <canvas id=\"myChart3\" ref={dataChart.chartRef3} />\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Timeline;","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport Chart from \"chart.js\";\r\n\r\nexport const TimelineCard = ({ nombrePais, alpha3Code}) => {\r\n\r\n    let ctx = document.getElementById(\"myChart3\");\r\n    let chart = null;\r\n\r\n    const [dataTimeline, setDataTimeline] = useState({\r\n        \"country\": \"\",\r\n        \"provinces\": [],\r\n        \"timeline\": {\r\n            \"cases\": {\r\n            },\r\n            \"deaths\": {\r\n            },\r\n            \"recovered\": {\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (alpha3Code!=''){\r\n\r\n            // alert(alpha3Code);\r\n        \r\n            Axios.get(`https://corona.lmao.ninja/v2/historical/${alpha3Code}?lastdays=30`).then(res => {\r\n\r\n\r\n\r\n\r\n                \r\n\r\n\r\n                let arregloFechaCasos = Object.keys(res.data.timeline.cases);\r\n                arregloFechaCasos = arregloFechaCasos.map(function (d) {\r\n                    let arrayD = d.split('/');\r\n                    return arrayD[1] + '/' + arrayD[0] + '/' + arrayD[2];\r\n                });\r\n\r\n\r\n                let arregloDatosCasos = Object.values(res.data.timeline.cases);\r\n                let arregloDatosMuertes = Object.values(res.data.timeline.deaths);\r\n                let arregloDatosRecuperaciones = Object.values(res.data.timeline.recovered);\r\n\r\n                \r\n\r\n                var config = {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: arregloFechaCasos,\r\n                        datasets: [\r\n                            {\r\n                                label: 'Casos',\r\n                                backgroundColor: window.chartColors.red,\r\n                                borderColor: window.chartColors.red,\r\n                                fill: false,\r\n                                data: arregloDatosCasos,\r\n                            },\r\n                            {\r\n                                label: 'Muertes',\r\n                                backgroundColor: window.chartColors.purple,\r\n                                borderColor: window.chartColors.purple,\r\n                                fill: false,\r\n                                data: arregloDatosMuertes,\r\n                            },\r\n                            {\r\n                                label: 'Recuperaciones',\r\n                                backgroundColor: window.chartColors.green,\r\n                                borderColor: window.chartColors.green,\r\n                                fill: false,\r\n                                data: arregloDatosRecuperaciones,\r\n                            },\r\n                        ]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: `Linea de tiempo del covid en ${res.data.country}`\r\n                        },\r\n                        scales: {\r\n                            xAxes: [{\r\n                                display: true,\r\n                            }],\r\n                            yAxes: [{\r\n                                display: true,\r\n                                // type: 'logarithmic',\r\n                            }]\r\n                        }\r\n                    }\r\n                };\r\n\r\n                \r\n                \r\n                chart = new Chart(ctx, config);\r\n\r\n\r\n            });\r\n        }else if(nombrePais==''){\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h5>Linea de tiempo de {nombrePais}</h5>\r\n                <div>\r\n                    <canvas id=\"myChart3\" />\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { Card } from 'bootstrap-4-react';\r\nimport Chart from \"chart.js\";\r\n\r\nconst PieCard = function({paisSeleccionado}){\r\n\r\n    \r\n\r\n    useEffect(function(){\r\n\r\n        let ctx1 = document.getElementById(\"myChart7\");\r\n\r\n        var config1 = {\r\n            type: 'pie',\r\n            data: {\r\n              datasets: [{\r\n                data: [\r\n                  paisSeleccionado.cases,\r\n                  paisSeleccionado.recovered,\r\n                  paisSeleccionado.deaths,\r\n                ],\r\n                backgroundColor: [\r\n                  window.chartColors.blue,\r\n                  window.chartColors.yellow,\r\n                  window.chartColors.red,\r\n                ],\r\n                label: 'Global'\r\n              }],\r\n              labels: [\r\n                'Casos '+ paisSeleccionado.cases,\r\n                'Recuperados '+ paisSeleccionado.recovered,\r\n                'Fallecidos '+ paisSeleccionado.deaths,\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true\r\n            }\r\n        };  \r\n          \r\n        let chart1 = new Chart(ctx1, config1);\r\n          \r\n\r\n    });\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <div>\r\n                    <canvas id=\"myChart7\" />\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default PieCard","import React from 'react'\r\nimport Moment from \"react-moment\";\r\n\r\n\r\n\r\nconst InfoCard = ({paisSeleccionado}) =>{\r\n\r\n    return (\r\n        <>\r\n            <h3>\r\n                Datos actuales de {paisSeleccionado.country} <img src={paisSeleccionado.countryInfo.flag} heigth=\"30\" width=\"30\" />\r\n            </h3>\r\n            <p>Fecha de actualizacion: <Moment format=\"DD/MM/YYYY\">{paisSeleccionado.updated}</Moment></p>\r\n            <p>Casos nivel mundial: <b>{paisSeleccionado.cases}</b></p>\r\n            <p>Total de recuperados: <b>{paisSeleccionado.recovered}</b></p>\r\n            <p>Total de fallecidos: <b>{paisSeleccionado.deaths}</b></p>\r\n            <p>Casos del dia de hoy: {paisSeleccionado.todayCases}</p>\r\n            <p>Total de casos activos: {paisSeleccionado.active}</p>\r\n            <p>Casos criticos: {paisSeleccionado.critical}</p>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default InfoCard;","import React, { useState, useEffect } from 'react'\r\nimport { Row, Col } from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport { TimelineCard } from '../atoms/TimelineCard';\r\nimport PieCard from '../atoms/PieCard';\r\nimport InfoCard from '../atoms/InfoCard';\r\nimport uuid from 'react-uuid'\r\n\r\nconst AreaMultiplesPaises = ()=>{\r\n\r\n    const [paisSeleccionado, setPaisSeleccionado] = useState({\r\n        updated: 0,\r\n        cases: 0,\r\n        todayCases: 0,\r\n        deaths: 0,\r\n        todayDeaths: 0,\r\n        recovered: 0,\r\n        active: 0,\r\n        critical: 0,\r\n        casesPerOneMillion: 0,\r\n        deathsPerOneMillion: 0,\r\n        tests: 0,\r\n        testsPerOneMillion: 0,\r\n        affectedCountries: 0,\r\n        country: '',\r\n        countryInfo:{},\r\n        alpha3Code:''\r\n    });\r\n\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [paises, setPaises] = useState([])\r\n\r\n    useEffect(()=>{\r\n        Axios.get(\"https://restcountries.eu/rest/v2/all\").then(res => {\r\n\r\n            setPaises(res.data);\r\n            \r\n        });\r\n    },[]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const cambiandoPais = (e)=>{\r\n        \r\n        let pais = e.target.value;\r\n\r\n        if(pais!==''){\r\n            Axios.get(\"https://corona.lmao.ninja/v2/countries/\" + pais).then(res => {\r\n    \r\n                setPaisSeleccionado({ ...res.data, alpha3Code: pais});\r\n                \r\n            });\r\n\r\n        }else{\r\n            setPaisSeleccionado({\r\n                updated: 0,\r\n                cases: 0,\r\n                todayCases: 0,\r\n                deaths: 0,\r\n                todayDeaths: 0,\r\n                recovered: 0,\r\n                active: 0,\r\n                critical: 0,\r\n                casesPerOneMillion: 0,\r\n                deathsPerOneMillion: 0,\r\n                tests: 0,\r\n                testsPerOneMillion: 0,\r\n                affectedCountries: 0,\r\n                country: '',\r\n                countryInfo:{},\r\n                alpha3Code:''\r\n            });\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>  \r\n            <Row>\r\n                <Col>\r\n                    <h2>Seleccione el pais</h2>   \r\n                    \r\n                    <select defaultValue={'DEFAULT'}  className=\"form-control\" id=\"exampleFormControlSelect2\" onChange={(e) => { cambiandoPais(e) }}> \r\n                        <option value=\"DEFAULT\" disabled>Seleccione</option>\r\n                        {\r\n                        paises.map( pais => (\r\n                            <option key={uuid()} value={pais.alpha3Code} >{pais.name}</option>  \r\n                        ))\r\n                        }                        \r\n                    </select>\r\n                </Col>\r\n            </Row>\r\n            <Row my=\"md-3\">\r\n                <Col col=\"4 md\">\r\n                    <InfoCard\r\n                    paisSeleccionado={paisSeleccionado}\r\n                    ></InfoCard>\r\n                </Col>\r\n                \r\n                <Col col=\"8 md\">\r\n                    <PieCard\r\n                        paisSeleccionado={paisSeleccionado} \r\n                    ></PieCard>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col col=\"12 md\">\r\n                    <TimelineCard\r\n                        nombrePais={paisSeleccionado.country}\r\n                        alpha3Code={paisSeleccionado.alpha3Code}\r\n                    ></TimelineCard>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AreaMultiplesPaises;","import React from 'react'\r\nimport SpecificArea from '../atoms/SpecificArea';\r\nimport Timeline from '../atoms/Timeline';\r\n\r\nconst AreaBolivia = ()=>{\r\n\r\n    return (\r\n        <>\r\n            <SpecificArea></SpecificArea>\r\n            <Timeline></Timeline>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AreaBolivia;","import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\n\r\nclass GlobalAreaPie extends Component{\r\n  \r\n  constructor(props){\r\n      super(props);\r\n\r\n  }\r\n    \r\n  chartRef = React.createRef();\r\n  \r\n  componentDidMount() {\r\n    \r\n    // console.log(this.props);\r\n    \r\n  }\r\n    \r\n  render() {\r\n\r\n    return (\r\n      <> \r\n        <canvas id=\"myChart\" ref={this.chartRef} />\r\n      </>\r\n    );\r\n\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n    const config = this.dibujar(this.props.globalData);\r\n    \r\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n    new Chart(myChartRef, config);\r\n\r\n  }\r\n\r\n  dibujar(data){\r\n    \r\n    const global_data = data;\r\n\r\n    \r\n\r\n    const config = {\r\n      type: 'pie',\r\n      data: {\r\n        datasets: [{\r\n          data: [\r\n            global_data.cases,\r\n            global_data.recovered,\r\n            global_data.deaths,\r\n          ],\r\n          backgroundColor: [\r\n            window.chartColors.blue,\r\n            window.chartColors.yellow,\r\n            window.chartColors.red,\r\n          ],\r\n          label: 'Global'\r\n        }],\r\n        labels: [\r\n          'Casos '+ global_data.cases,\r\n          'Recuperados '+ global_data.recovered,\r\n          'Fallecidos '+ global_data.deaths,\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true\r\n      }\r\n    };\r\n    return config;\r\n  }\r\n\r\n}\r\n\r\nexport default GlobalAreaPie;","import React, { Component } from 'react';\r\nimport { Row, Col } from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\n\r\nimport Moment from \"react-moment\";\r\nimport GlobalAreaPie from '../atoms/GlobalAreaPie';\r\n\r\n\r\n\r\nclass AreaGlobal extends Component{\r\n\r\n    constructor(prop){\r\n        super(prop);\r\n\r\n        this.state = {\r\n          updated: 0,\r\n          cases: 0,\r\n          todayCases: 0,\r\n          deaths: 0,\r\n          todayDeaths: 0,\r\n          recovered: 0,\r\n          active: 0,\r\n          critical: 0,\r\n          casesPerOneMillion: 0,\r\n          deathsPerOneMillion: 0,\r\n          tests: 0,\r\n          testsPerOneMillion: 0,\r\n          affectedCountries: 0,\r\n        };\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n      \r\n      Axios.get(\"https://corona.lmao.ninja/v2/continents\").then(res => {\r\n\r\n             \r\n        console.log(res.data);\r\n\r\n        var updated= 0;\r\n        var cases= 0;\r\n        var todayCases= 0;\r\n        var deaths= 0;\r\n        var todayDeaths= 0;\r\n        var recovered= 0;\r\n        var active= 0;\r\n        var critical= 0;\r\n        var casesPerOneMillion= 0;\r\n        var deathsPerOneMillion= 0;\r\n        var tests= 0;\r\n        var testsPerOneMillion= 0;\r\n        var affectedCountries= 0;\r\n\r\n        res.data.forEach(element => {\r\n          updated = element.updated;\r\n          cases= cases+element.cases;\r\n          todayCases= todayCases+element.todayCases;\r\n          deaths= deaths+element.deaths;\r\n          todayDeaths= todayDeaths+element.todayDeaths;\r\n          recovered= recovered+element.recovered;\r\n          active= active+element.active;\r\n          critical= critical+element.critical;\r\n          casesPerOneMillion= casesPerOneMillion+element.casesPerOneMillion;\r\n          deathsPerOneMillion= deathsPerOneMillion+element.deathsPerOneMillion;\r\n          tests= tests+element.tests;\r\n          testsPerOneMillion= testsPerOneMillion+element.testsPerOneMillion;\r\n          affectedCountries= affectedCountries+element.affectedCountries;\r\n\r\n        }); \r\n        \r\n        this.setState({\r\n          'updated': updated,\r\n          'cases': cases,\r\n          'todayCases': todayCases,\r\n          'deaths': deaths,\r\n          'todayDeaths': todayDeaths,\r\n          'recovered': recovered,\r\n          'active': active,\r\n          'critical': critical,\r\n          'casesPerOneMillion': casesPerOneMillion,\r\n          'deathsPerOneMillion': deathsPerOneMillion,\r\n          'tests': tests,\r\n          'testsPerOneMillion': testsPerOneMillion,\r\n          'affectedCountries': affectedCountries,\r\n        });\r\n        \r\n      });\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        return(\r\n            <Row>\r\n              <Col>\r\n                <h2>Datos nivel mundial.</h2>\r\n                <p>Fecha de actualizacion: <Moment format=\"DD/MM/YYYY\">{this.state.updated}</Moment></p>\r\n                <p>Casos nivel mundial: <b>{this.state.cases}</b></p>\r\n                <p>Total de recuperados: <b>{this.state.recovered}</b></p>\r\n                <p>Total de fallecidos: <b>{this.state.deaths}</b></p>\r\n                <p>Casos del dia de hoy: {this.state.todayCases}</p>\r\n                <p>Total de casos activos: {this.state.active}</p>\r\n                <p>Casos criticos: {this.state.critical}</p>\r\n                {/* <p>Paises afectados: {this.state.affectedCountries}</p> */}\r\n              </Col>\r\n              <Col>\r\n                    <GlobalAreaPie globalData={this.state} />\r\n                    {/* <LineGraph></LineGraph> */}            \r\n              </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n}\r\nexport default AreaGlobal;","import React from \"react\";\r\nimport { Container } from 'bootstrap-4-react';\r\n\r\nimport SpecificArea from \"../atoms/SpecificArea\";\r\nimport Timeline from \"../atoms/Timeline\";\r\nimport AreaMultiplesPaises from \"../organisms/AreaMultiplesPaises\";\r\nimport AreaBolivia from \"../organisms/AreaBolivia\";\r\nimport AreaGlobal from \"../organisms/AreaGlobal\";\r\n\r\n\r\n\r\nconst Estadistica = function(){\r\n\r\n    return (\r\n      <Container>\r\n        \r\n        <AreaMultiplesPaises></AreaMultiplesPaises>\r\n        \r\n        <AreaGlobal></AreaGlobal>\r\n\r\n        <AreaBolivia></AreaBolivia>\r\n\r\n      </Container>\r\n    );\r\n}\r\n\r\nexport default Estadistica;","import React from \"react\";\r\nimport { Navbar, Nav, Button, Dropdown, Form, Collapse } from 'bootstrap-4-react';\r\nimport Estadistica from \"./components/pages/Estadisticas\";\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  \r\n  return (\r\n    \r\n    <>\r\n      <Navbar expand=\"lg\" light bg=\"light\">\r\n        <Navbar.Brand href=\"#\">\r\n          Navbar\r\n        </Navbar.Brand>\r\n        <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n        <Collapse navbar id=\"navbarSupportedContent\">\r\n          <Navbar.Nav mr=\"auto\">\r\n            <Nav.Item active>\r\n              <Nav.Link href=\"#\">Home</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#\">Link</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item dropdown>\r\n              <Nav.Link dropdownToggle>Dropdown</Nav.Link>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item>Action</Dropdown.Item>\r\n                <Dropdown.Item>Another action</Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <Dropdown.Item>Something else</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link disabled>Disabled</Nav.Link>\r\n            </Nav.Item>\r\n          </Navbar.Nav>\r\n          <Form inline my=\"2 lg-0\">\r\n            <Form.Input type=\"search\" placeholder=\"Search\" mr=\"sm-2\" />\r\n            <Button outline success my=\"2 sm-0\">Search</Button>\r\n          </Form>\r\n        </Collapse>\r\n      </Navbar>\r\n\r\n      <Estadistica></Estadistica>\r\n\r\n      \r\n      \r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nwindow.chartColors = {\r\n  red: 'rgb(255, 99, 132)',\r\n  orange: 'rgb(255, 159, 64)',\r\n  yellow: 'rgb(255, 205, 86)',\r\n  green: 'rgb(75, 192, 192)',\r\n  blue: 'rgb(54, 162, 235)',\r\n  purple: 'rgb(153, 102, 255)',\r\n  grey: 'rgb(201, 203, 207)'\r\n};\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}