{"version":3,"sources":["GlobalAreaPie.jsx","GlobalArea.jsx","SpecificArea.jsx","App.js","serviceWorker.js","index.js"],"names":["GlobalAreaPie","props","chartRef","React","createRef","id","ref","this","config","dibujar","globalData","myChartRef","current","getContext","Chart","data","global_data","type","datasets","cases","recovered","deaths","backgroundColor","window","chartColors","blue","yellow","red","label","labels","options","responsive","Component","GlobalArea","prop","state","updated","todayCases","todayDeaths","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","affectedCountries","Axios","get","then","res","console","log","forEach","element","setState","format","SpecificArea","useState","chartRef2","dataBarra","myData","setMyData","useEffect","myChartRef2","purple","green","text","Body","Text","App","expand","light","bg","Brand","href","Toggler","target","navbar","Nav","mr","Item","Link","dropdown","dropdownToggle","Menu","Divider","disabled","inline","my","Input","placeholder","outline","success","Boolean","location","hostname","match","orange","grey","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aed5d95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\n\r\nclass GlobalAreaPie extends Component{\r\n  \r\n  constructor(props){\r\n      super(props);\r\n\r\n  }\r\n    \r\n  chartRef = React.createRef();\r\n  \r\n  componentDidMount() {\r\n    \r\n    // console.log(this.props);\r\n    \r\n  }\r\n    \r\n  render() {\r\n\r\n    return (\r\n      <> \r\n        <canvas id=\"myChart\" ref={this.chartRef} />\r\n      </>\r\n    );\r\n\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n    const config = this.dibujar(this.props.globalData);\r\n    \r\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n    new Chart(myChartRef, config);\r\n\r\n  }\r\n\r\n  dibujar(data){\r\n    \r\n    const global_data = data;\r\n\r\n    \r\n\r\n    const config = {\r\n      type: 'pie',\r\n      data: {\r\n        datasets: [{\r\n          data: [\r\n            global_data.cases,\r\n            global_data.recovered,\r\n            global_data.deaths,\r\n          ],\r\n          backgroundColor: [\r\n            window.chartColors.blue,\r\n            window.chartColors.yellow,\r\n            window.chartColors.red,\r\n          ],\r\n          label: 'Global'\r\n        }],\r\n        labels: [\r\n          'Casos '+ global_data.cases,\r\n          'Recuperados '+ global_data.recovered,\r\n          'Fallecidos '+ global_data.deaths,\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true\r\n      }\r\n    };\r\n    return config;\r\n  }\r\n\r\n}\r\n\r\nexport default GlobalAreaPie;","import React, { Component } from 'react';\r\nimport { Row, Col } from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport GlobalAreaPie from './GlobalAreaPie';\r\nimport Moment from \"react-moment\";\r\n\r\n\r\n\r\nclass GlobalArea extends Component{\r\n\r\n    constructor(prop){\r\n        super(prop);\r\n\r\n        this.state = {\r\n          updated: 0,\r\n          cases: 0,\r\n          todayCases: 0,\r\n          deaths: 0,\r\n          todayDeaths: 0,\r\n          recovered: 0,\r\n          active: 0,\r\n          critical: 0,\r\n          casesPerOneMillion: 0,\r\n          deathsPerOneMillion: 0,\r\n          tests: 0,\r\n          testsPerOneMillion: 0,\r\n          affectedCountries: 0,\r\n        };\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n      \r\n      Axios.get(\"https://corona.lmao.ninja/v2/continents\").then(res => {\r\n\r\n             \r\n        console.log(res.data);\r\n\r\n        var updated= 0;\r\n        var cases= 0;\r\n        var todayCases= 0;\r\n        var deaths= 0;\r\n        var todayDeaths= 0;\r\n        var recovered= 0;\r\n        var active= 0;\r\n        var critical= 0;\r\n        var casesPerOneMillion= 0;\r\n        var deathsPerOneMillion= 0;\r\n        var tests= 0;\r\n        var testsPerOneMillion= 0;\r\n        var affectedCountries= 0;\r\n\r\n        res.data.forEach(element => {\r\n          updated = element.updated;\r\n          cases= cases+element.cases;\r\n          todayCases= todayCases+element.todayCases;\r\n          deaths= deaths+element.deaths;\r\n          todayDeaths= todayDeaths+element.todayDeaths;\r\n          recovered= recovered+element.recovered;\r\n          active= active+element.active;\r\n          critical= critical+element.critical;\r\n          casesPerOneMillion= casesPerOneMillion+element.casesPerOneMillion;\r\n          deathsPerOneMillion= deathsPerOneMillion+element.deathsPerOneMillion;\r\n          tests= tests+element.tests;\r\n          testsPerOneMillion= testsPerOneMillion+element.testsPerOneMillion;\r\n          affectedCountries= affectedCountries+element.affectedCountries;\r\n\r\n        }); \r\n        \r\n        this.setState({\r\n          'updated': updated,\r\n          'cases': cases,\r\n          'todayCases': todayCases,\r\n          'deaths': deaths,\r\n          'todayDeaths': todayDeaths,\r\n          'recovered': recovered,\r\n          'active': active,\r\n          'critical': critical,\r\n          'casesPerOneMillion': casesPerOneMillion,\r\n          'deathsPerOneMillion': deathsPerOneMillion,\r\n          'tests': tests,\r\n          'testsPerOneMillion': testsPerOneMillion,\r\n          'affectedCountries': affectedCountries,\r\n        });\r\n        \r\n      });\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        return(\r\n            <Row>\r\n              <Col>\r\n                <h2>Datos nivel mundial.</h2>\r\n                <p>Fecha de actualizacion: <Moment format=\"DD/MM/YYYY\">{this.state.updated}</Moment></p>\r\n                <p>Casos nivel mundial: <b>{this.state.cases}</b></p>\r\n                <p>Total de recuperados: <b>{this.state.recovered}</b></p>\r\n                <p>Total de fallecidos: <b>{this.state.deaths}</b></p>\r\n                <p>Casos del dia de hoy: {this.state.todayCases}</p>\r\n                <p>Total de casos activos: {this.state.active}</p>\r\n                <p>Casos criticos: {this.state.critical}</p>\r\n                {/* <p>Paises afectados: {this.state.affectedCountries}</p> */}\r\n              </Col>\r\n              <Col>\r\n                    <GlobalAreaPie globalData={this.state} />\r\n                    {/* <LineGraph></LineGraph> */}            \r\n              </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n}\r\nexport default GlobalArea;","import React, { useState, useEffect } from 'react';\r\nimport {Row, Col, Card} from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport Chart from \"chart.js\";\r\nimport Moment from \"react-moment\";\r\n// import MultiSelect from \"react-multi-select-component\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst SpecificArea = function(){\r\n\r\n  \r\n  // const options = [\r\n  //     { label: \"Grapes 🍇\", value: \"grapes\" },\r\n  //     { label: \"Mango 🥭\", value: \"mango\" },\r\n  //     { label: \"Strawberry 🍓\", value: \"strawberry\" },\r\n  // ];\r\n\r\n  // const [selected, setSelected] = useState([]);\r\n\r\n  const [dataBarra, setDataBarra] = useState({\r\n    chartRef2 : React.createRef()\r\n  });\r\n\r\n  const [myData, setMyData] = useState({\r\n    \"updated\": 1587044800696,\r\n    \"country\": \"\",\r\n    \"countryInfo\": {\r\n      \"_id\": 0,\r\n      \"iso2\": \"\",\r\n      \"iso3\": \"\",\r\n      \"lat\": 0,\r\n      \"long\": 0,\r\n      \"flag\": \"\"\r\n    },\r\n    \"cases\": 0,\r\n    \"todayCases\": 0,\r\n    \"deaths\": 0,\r\n    \"todayDeaths\": 0,\r\n    \"recovered\": 0,\r\n    \"active\": 0,\r\n    \"critical\": 0,\r\n    \"casesPerOneMillion\": 0,\r\n    \"deathsPerOneMillion\": 0,\r\n    \"tests\": 0,\r\n    \"testsPerOneMillion\": 0\r\n  });\r\n\r\n  useEffect(()=>{\r\n    Axios.get(\"https://corona.lmao.ninja/v2/countries/BOL\").then(res => {\r\n      console.log(res.data);\r\n      setMyData(res.data);\r\n      \r\n      \r\n\r\n      const myChartRef2 = dataBarra.chartRef2.current.getContext(\"2d\");\r\n\r\n      \r\n      new Chart(myChartRef2, {\r\n        type: 'horizontalBar',\r\n        data: {\r\n          \"labels\": [`Casos (${res.data.cases})`, `Fallecidos (${res.data.deaths})`, `Recuperados (${res.data.recovered})`],\r\n          \"datasets\": [{\r\n            \"label\": [\"Bolivia\"], \r\n            \"data\": [res.data.cases, res.data.deaths, res.data.recovered], \r\n            \"fill\": false,\r\n            \"backgroundColor\": [window.chartColors.red, window.chartColors.purple, window.chartColors.green ]\r\n          }]\r\n        },\r\n      });\r\n\r\n\r\n\r\n      \r\n\r\n    });\r\n  },[]);\r\n  \r\n  return (\r\n      <>\r\n        <Row>\r\n        <Col text=\"center\">\r\n          <h2>Datos en Bolivia.</h2>\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <p>Casos a nivel nacional: <b>{myData.cases}</b></p>\r\n                <p>Total de recuperados: <b>{myData.recovered}</b></p>\r\n                <p>Total de fallecidos: <b>{myData.deaths}</b></p>\r\n                <p>Casos del dia de hoy: {myData.todayCases}</p>\r\n                <p>Total de casos activos: {myData.active}</p>\r\n                <p>Casos criticos: {myData.critical}</p>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n            \r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Text>\r\n                  <h5>Cuadro de la fecha <Moment format=\"DD/MM/YYYY\">{myData.updated}</Moment></h5>\r\n                      {/* <pre>{JSON.stringify(selected)}</pre>\r\n                      <MultiSelect\r\n                          options={options}\r\n                          value={selected}\r\n                          onChange={setSelected}\r\n                          labelledBy={\"Select\"}\r\n                      /> */}\r\n                  <canvas id=\"myChart2\" ref={dataBarra.chartRef2} />\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n\r\n          </Col>\r\n        </Row>\r\n      </>\r\n  );\r\n\r\n}\r\n\r\nexport default SpecificArea;    ","import React from \"react\";\r\nimport { Navbar, Nav, Button, Dropdown, Form, Collapse, Container } from 'bootstrap-4-react';\r\nimport './App.css';\r\nimport GlobalArea from \"./GlobalArea\";\r\nimport SpecificArea from \"./SpecificArea\";\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  \r\n  return (\r\n    \r\n    <>\r\n      <Navbar expand=\"lg\" light bg=\"light\">\r\n        <Navbar.Brand href=\"#\">\r\n          Navbar\r\n        </Navbar.Brand>\r\n        <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n        <Collapse navbar id=\"navbarSupportedContent\">\r\n          <Navbar.Nav mr=\"auto\">\r\n            <Nav.Item active>\r\n              <Nav.Link href=\"#\">Home</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#\">Link</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item dropdown>\r\n              <Nav.Link dropdownToggle>Dropdown</Nav.Link>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item>Action</Dropdown.Item>\r\n                <Dropdown.Item>Another action</Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <Dropdown.Item>Something else</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link disabled>Disabled</Nav.Link>\r\n            </Nav.Item>\r\n          </Navbar.Nav>\r\n          <Form inline my=\"2 lg-0\">\r\n            <Form.Input type=\"search\" placeholder=\"Search\" mr=\"sm-2\" />\r\n            <Button outline success my=\"2 sm-0\">Search</Button>\r\n          </Form>\r\n        </Collapse>\r\n      </Navbar>\r\n\r\n      <Container>\r\n        \r\n        <GlobalArea></GlobalArea>\r\n        \r\n        <SpecificArea></SpecificArea>\r\n\r\n        \r\n\r\n      </Container>\r\n      \r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.chartColors = {\n  red: 'rgb(255, 99, 132)',\n  orange: 'rgb(255, 159, 64)',\n  yellow: 'rgb(255, 205, 86)',\n  green: 'rgb(75, 192, 192)',\n  blue: 'rgb(54, 162, 235)',\n  purple: 'rgb(153, 102, 255)',\n  grey: 'rgb(201, 203, 207)'\n};\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}