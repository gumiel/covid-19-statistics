{"version":3,"sources":["GlobalAreaPie.jsx","GlobalArea.jsx","App.js","serviceWorker.js","index.js"],"names":["GlobalAreaPie","props","chartRef","React","createRef","id","ref","this","config","dibujar","globalData","myChartRef","current","getContext","Chart","data","global_data","window","chartColors","red","orange","yellow","green","blue","purple","grey","type","datasets","cases","recovered","deaths","backgroundColor","label","labels","options","responsive","Component","GlobalArea","prop","state","updated","todayCases","todayDeaths","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","affectedCountries","Axios","get","then","res","setState","App","expand","light","bg","Brand","href","Toggler","target","navbar","Nav","mr","Item","Link","dropdown","dropdownToggle","Menu","Divider","disabled","inline","my","Input","placeholder","outline","success","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd57db98.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\n\r\nclass GlobalAreaPie extends Component{\r\n  \r\n  constructor(props){\r\n      super(props);\r\n\r\n  }\r\n    \r\n  chartRef = React.createRef();\r\n  \r\n  componentDidMount() {\r\n    \r\n    // console.log(this.props);\r\n    \r\n  }\r\n    \r\n  render() {\r\n\r\n    return (\r\n      <> \r\n        <canvas id=\"myChart\" ref={this.chartRef} />\r\n      </>\r\n    );\r\n\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n    const config = this.dibujar(this.props.globalData);\r\n    \r\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n    new Chart(myChartRef, config);\r\n\r\n  }\r\n\r\n  dibujar(data){\r\n    \r\n    const global_data = data;\r\n\r\n    window.chartColors = {\r\n      red: 'rgb(255, 99, 132)',\r\n      orange: 'rgb(255, 159, 64)',\r\n      yellow: 'rgb(255, 205, 86)',\r\n      green: 'rgb(75, 192, 192)',\r\n      blue: 'rgb(54, 162, 235)',\r\n      purple: 'rgb(153, 102, 255)',\r\n      grey: 'rgb(201, 203, 207)'\r\n    };\r\n\r\n    const config = {\r\n      type: 'pie',\r\n      data: {\r\n        datasets: [{\r\n          data: [\r\n            global_data.cases,\r\n            global_data.recovered,\r\n            global_data.deaths,\r\n          ],\r\n          backgroundColor: [\r\n            window.chartColors.blue,\r\n            window.chartColors.yellow,\r\n            window.chartColors.red,\r\n          ],\r\n          label: 'Global'\r\n        }],\r\n        labels: [\r\n          'Casos '+ global_data.cases,\r\n          'Recuperados '+ global_data.recovered,\r\n          'Fallecidos '+ global_data.deaths,\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true\r\n      }\r\n    };\r\n    return config;\r\n  }\r\n\r\n}\r\n\r\nexport default GlobalAreaPie;","import React, { Component } from 'react';\r\nimport { Row, Col } from 'bootstrap-4-react';\r\nimport Axios from 'axios';\r\nimport GlobalAreaPie from './GlobalAreaPie';\r\n\r\n\r\n\r\nclass GlobalArea extends Component{\r\n\r\n    constructor(prop){\r\n        super(prop);\r\n\r\n        this.state = {\r\n          updated: 0,\r\n          cases: 0,\r\n          todayCases: 0,\r\n          deaths: 0,\r\n          todayDeaths: 0,\r\n          recovered: 0,\r\n          active: 0,\r\n          critical: 0,\r\n          casesPerOneMillion: 0,\r\n          deathsPerOneMillion: 0,\r\n          tests: 0,\r\n          testsPerOneMillion: 0,\r\n          affectedCountries: 0,\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n      \r\n      Axios.get(\"https://corona.lmao.ninja/all\").then(res => {\r\n\r\n        this.setState(res.data);      \r\n      });\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        return(\r\n            <Row>\r\n              <Col>\r\n                <h2>Datos nivel mundial.</h2>\r\n                <p>Fecha de actualizacion: {this.state.updated}</p>\r\n                <p>Casos nivel mundial: <b>{this.state.cases}</b></p>\r\n                <p>Total de recuperados: <b>{this.state.recovered}</b></p>\r\n                <p>Total de fallecidos: <b>{this.state.deaths}</b></p>\r\n                <p>Casos del dia de hoy: {this.state.todayCases}</p>\r\n                <p>Total de casos activos: {this.state.active}</p>\r\n                <p>Casos criticos: {this.state.critical}</p>\r\n                <p>Paises afectados: {this.state.affectedCountries}</p>\r\n              </Col>\r\n              <Col>\r\n                    <GlobalAreaPie globalData={this.state} />\r\n                    {/* <LineGraph></LineGraph> */}            \r\n              </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n}\r\nexport default GlobalArea;","import React from \"react\";\r\nimport { Navbar, Nav, Button, Dropdown, Form, Collapse, Container } from 'bootstrap-4-react';\r\nimport './App.css';\r\nimport GlobalArea from \"./GlobalArea\";\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  \r\n  return (\r\n    \r\n    <>\r\n      <Navbar expand=\"lg\" light bg=\"light\">\r\n        <Navbar.Brand href=\"#\">\r\n          Navbar\r\n        </Navbar.Brand>\r\n        <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n        <Collapse navbar id=\"navbarSupportedContent\">\r\n          <Navbar.Nav mr=\"auto\">\r\n            <Nav.Item active>\r\n              <Nav.Link href=\"#\">Home</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#\">Link</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item dropdown>\r\n              <Nav.Link dropdownToggle>Dropdown</Nav.Link>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item>Action</Dropdown.Item>\r\n                <Dropdown.Item>Another action</Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <Dropdown.Item>Something else</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link disabled>Disabled</Nav.Link>\r\n            </Nav.Item>\r\n          </Navbar.Nav>\r\n          <Form inline my=\"2 lg-0\">\r\n            <Form.Input type=\"search\" placeholder=\"Search\" mr=\"sm-2\" />\r\n            <Button outline success my=\"2 sm-0\">Search</Button>\r\n          </Form>\r\n        </Collapse>\r\n      </Navbar>\r\n      <Container>\r\n        <GlobalArea></GlobalArea>\r\n\r\n      </Container>\r\n      \r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}